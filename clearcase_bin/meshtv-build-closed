#!/bin/sh
#-----------------------------------------------------------------------
#
# MESHTV-BUILD-CLOSED - Build the meshtv distributions on the closed
#                       network.
#
# Author: Eric Brugger
# Date:   May 15, 2000
#
# Usage:
#    meshtv-build-closed -v <version> -d <distribution>
#
#-----------------------------------------------------------------------

test=no

#
# Parse the execute line, providing default values for error checking.
#
warp=true
oak=true
y=true
tidalwave=true

ver=undefined
dist=undefined

#
# The loop is executed once for each symbol on the execute line.  This means
# that $1 may be blank for later executions of the loop if any "shift 2"
# commands are executed.  The variable abc is not used in the loop.
#
for abc
do
   case $1 in
      -none)
         warp=false
         oak=false
         y=false
         tidalwave=false
         shift
         ;;
      -warp)
         warp=false
         shift
         ;;
      +warp)
         warp=true
         shift
         ;;
      -oak)
         oak=false
         shift
         ;;
      +oak)
         oak=true
         shift
         ;;
      -y)
         y=false
         shift
         ;;
      +y)
         y=true
         shift
         ;;
      -tidalwave)
         tidalwave=false
         shift
         ;;
      +tidalwave)
         tidalwave=true
         shift
         ;;
      -v)
         ver=$2
         shift 2
         ;;
      -d)
         dist=$2
         shift 2
         ;;
   esac
done

#
# Check that both the version and distribution name were provided.
#
if [ $ver = undefined ]
then
   echo "Usage: -v <version> -d <distribution>"
   exit
fi
if [ $dist = undefined ]
then
   echo "Usage: -v <version> -d <distribution>"
   exit
fi

#
# Check that the distribution exists.
#
distfile=$dist.sh
if [ ! -f $distfile ]
then
   echo "Distribution file doesn't exist."
   exit
fi

ver2=`echo $ver | tr "." "_"`

#
# Build on warp.
#
rm -f warp
cat <<EOF > warp
#!/bin/sh
cd /scratch/brugger
rm -rf warp/meshtvbuild
mkdir warp/meshtvbuild
cd warp/meshtvbuild
mv ../$dist.sh .
sh $dist.sh > buildlog 2>&1
cd $dist
env CC=cc CFLAGS="-O2 -n32" ./configure >> ../buildlog 2>&1
env PARALLEL=2 make -P >> ../buildlog 2>&1
cp /usr/local/meshtv/bin/mpeg_encode bin
clearcase_bin/meshtv-bin-dist -v $ver >> ../buildlog 2>&1
mv meshtv$ver2.irix6.tar.gz ..
cp clearcase_bin/meshtv-install ..
cd ..
./meshtv-install $ver irix6 meshtv >> buildlog 2>&1
EOF

if [ $warp = true ]
then
   if [ $test = no ]
   then
      scp -P 22 warp warp:build_meshtv_warp
      scp -P 22 $dist.sh warp:/scratch/brugger/warp
      ssh -p 22 warp "chmod 750 build_meshtv_warp;./build_meshtv_warp" &
   fi
fi

#
# Build on oak, both serial and parallel versions.
#
rm -f oak
cat <<EOF > oak
cd /nfs/tmp1/brugger
rm -rf oak/meshtvbuild
mkdir oak/meshtvbuild
cd oak/meshtvbuild
mv ../$dist.sh .
sh $dist.sh > buildlog 2>&1
cd $dist
./configure --without-readline >> ../buildlog 2>&1
make >> ../buildlog 2>&1
clearcase_bin/meshtv-bin-dist -c -v $ver >> ../buildlog 2>&1
mv meshtv$ver2.osf1.tar.Z ..
cp clearcase_bin/meshtv-install ..
cd ..
./meshtv-install $ver osf1 meshtv >> buildlog 2>&1
cd $dist
make distclean  >> buildlog 2>&1
./configure --without-readline --enable-parallel >> ../buildlog 2>&1
make >> ../buildlog 2>&1
cp bin/meshtv ../meshtvp$ver
cp bin/meshtvx ../meshtvxp$ver
cd ..
cp meshtvp$ver meshtvxp$ver meshtv/bin/dec-osf1-alpha
EOF

if [ $oak = true ]
then
   if [ $test = no ]
   then
      scp oak oak:build_meshtv_oak
      scp $dist.sh oak:/nfs/tmp1/brugger/oak
      ssh oak "chmod 750 build_meshtv_oak;./build_meshtv_oak" &
   fi
fi


#
# Build on y, both serial and parallel versions.
#
rm -f y
cat <<EOF > y
#!/bin/sh
cd /nfs/tmp1/brugger
rm -rf y/meshtvbuild
mkdir y/meshtvbuild
cd y/meshtvbuild
mv ../$dist.sh .
sh $dist.sh > buildlog 2>&1
cd $dist
env CFLAGS=-O2 ./configure --with-exodus=/g/g10/meredith/exodus >> ../buildlog 2>&1
make >> ../buildlog 2>&1
clearcase_bin/meshtv-bin-dist -c -v $ver >> ../buildlog 2>&1
mv meshtv$ver2.aix.tar.Z ..
cp clearcase_bin/meshtv-install ..
cd ..
./meshtv-install $ver aix meshtv >> buildlog 2>&1
cd $dist
make distclean  >> buildlog 2>&1
env CFLAGS=-O2 ./configure --enable-parallel --with-exodus=/g/g10/meredith/exodus >> ../buildlog 2>&1
make >> ../buildlog 2>&1
cp bin/meshtv ../meshtvp$ver
cp bin/meshtvx ../meshtvxp$ver
cd ..
cp meshtvp$ver meshtvxp$ver meshtv/bin/ibm-aix-pwr
EOF

if [ $y = true ]
then
   if [ $test = no ]
   then
      scp y y:build_meshtv_y
      scp $dist.sh y:/nfs/tmp1/brugger/y
      ssh y "chmod 750 build_meshtv_y;./build_meshtv_y" &
   fi
fi

#
# Build on tidalwave, both serial and parallel versions.
#
rm -f tidalwave
cat <<EOF > tidalwave
#!/bin/sh
cd /fc/san1/brugger
rm -rf tidalwave/meshtvbuild
mkdir tidalwave/meshtvbuild
cd tidalwave/meshtvbuild
mv ../$dist.sh .
sh $dist.sh > buildlog 2>&1
cd $dist
env CC=cc CFLAGS="-O2 -64 -mips4" ./configure >> ../buildlog 2>&1
env PARALLEL=20 make -P >> ../buildlog 2>&1
cp /usr/local/apps/meshtv/bin/mpeg_encode bin
clearcase_bin/meshtv-bin-dist -v $ver >> ../buildlog 2>&1
mv meshtv$ver2.irix6.tar.gz ..
cp clearcase_bin/meshtv-install ..
cd ..
./meshtv-install $ver irix6 meshtv >> buildlog 2>&1
cd $dist
make distclean  >> buildlog 2>&1
env CC=cc CFLAGS="-O2 -64 -mips4" ./configure --enable-parallel >> ../buildlog 2>&1
env PARALLEL=20 make -P >> ../buildlog 2>&1
cp bin/meshtv ../meshtvp$ver
cp bin/meshtvx ../meshtvxp$ver
cd ..
cp meshtvp$ver meshtvxp$ver meshtv/bin/sgi-irix6-mips2
EOF

if [ $tidalwave = true ]
then
   if [ $test = no ]
   then
      scp tidalwave tidalwave:build_meshtv_tidalwave
      scp $dist.sh tidalwave:/fc/san1/brugger/tidalwave
      ssh tidalwave "chmod 750 build_meshtv_tidalwave;./build_meshtv_tidalwave" &
   fi
fi

#
# Clean up.
#
if [ $test = no ]
then
   rm warp oak y tidalwave
fi
