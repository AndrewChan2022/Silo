##							-*- makefile -*-
## Automatic dependencies...  We keep a list of dependencies in `.depend'
## for each of the source files on which it depends.  When one of the source
## files is modified we remove its record from .depend and regenerate the
## dependencies, tacking them onto the end of .depend.  By including the
## .depend file into the makefile, we're telling make that the makefile
## depends on the dependency list in the .depend file.
##
## This is as fast as the `.d' method described in the GNU make manual
## for automatic dependencies, but has the added advantage that all
## dependencies are stored in one place.  The advantage over the
## `makedepend' program is that only those files that are out of date
## have dependency information rebuilt, and the Makefile is not modified.
##
.PRECIOUS: .depend
dep depend: .depend

.depend: $(SRC)
	@touch .depend
	@for dep in $? dummy; do \
	   if [ $$dep != "dummy" ]; then \
	      echo Building dependencies for $$dep ;\
	      obj=`echo $$dep | sed 's/\.c/.o/'` ;\
	      sed "/^$$obj/,/[^\\]$$/d" <$@ > $@- && mv $@- $@ ;\
	      $(CC) -M -MG $(CFLAGS) $(CPPFLAGS) $$dep >>$@;\
	   fi;\
	done

-include .depend

##
## Make sure the configuration files are up-to-date.  The `stamp-' files
## are necessary because the timestamps of `config.h.in' and
## `config.h' will not be changed if remaking them does not
## change their contents.  We should include `stamp-h.in' in our
## distributions so `make' will consider `config.h.in' up to date.
##
ROOT=$(tmpinc)/..

$(tmpinc)/config.h.in: $(tmpinc)/stamp-h.in
$(tmpinc)/stamp-h.in: $(ROOT)/configure.in $(ROOT)/acconfig.h
	-(cd $(ROOT); autoheader)
	echo stamp > $(tmpinc)/stamp-h.in

$(tmpinc)/config.h: $(tmpinc)/stamp-h
$(tmpinc)/stamp-h: $(tmpinc)/config.h.in $(ROOT)/config.status
	(cd $(ROOT); CONFIG_FILES= CONFIG_HEADERS=include/config.h ./config.status)
	echo stamp > $(tmpinc)/stamp-h
