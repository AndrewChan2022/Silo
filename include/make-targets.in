##							-*- makefile -*-
## The following targets come from `include/targets'
##
install: install_lib install_bin

##
## Targets `install_lib' and `install_bin' are specified here with
## no dependencies and no commands so that they don't have to be
## defined in every Makefile.in.
##
install_lib:

install_bin:

##
## Same as `clean' and then remove Emacs backup files, core dumps, Makefiles,
## and any files listed in DISTCLEAN_FILES.  Then go to the temporary include
## directory and remove those copies of the public header files.
##
## The Makefile line is separate from the *~ and core line because
## some rm's won't get to Makefile if there are no backup files or
## core files.
##
## The DISTCLEAN_FILES variable is something that only exists in some
## Makefiles.  It is used to specify additional files that need to be
## removed when doing a distclean.  Since distclean is used to get rid of
## anything that can be automatically generated, the files that are in
## DISTCLEAN_FILES are things that are generated through *.in files by
## configure.
##
distclean: clean
	$(RM) $(DISTCLEAN_FILES) *~ core
	$(RM) Makefile


##
## Tell make which suffixes are acceptable
##
.SUFFIXES: .c .cpp .C .f

##
## We separate C compiler flags from C preprocessor flags and most
## make's don't have the correct implicit rules, so we redefine them
## here.  If you don't like seeing the `ar' and `rm' commands when
## you run make, just add a `@' to the beginning of the line.
##
.c.a:
	false

# There cannot be a tab before the OS_RULE line.  The rule contains its own
# tab character.
.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $<
@OS_RULE@

.C.o:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $<
@OS_RULE@

.f.o:
	$(F77) $(F77FLAGS) -c $<


##							-*- makefile -*-
##
## If $(LIB) is defined, then write a rule that builds the library
## from the object files.  We compile the C files into `*.o' files and
## just leave them sitting in the directory.  The library is built
## from these object files.
##
## Modifications:
##
##	Robb Matzke, 5 Mar 1997
##	Added `-' to the ar options so xemacs highlights those compile
##	lines correctly.
##
##	Robb Matzke, 2 Feb 1998
##	Added a delay for machines that can compile an entire
##	directory in under one second since invoking make recursively
##	to build a library causes the modification times to be equal
##	in the next directory, confusing make.
##
$(LIB) nolib: $(OBJ)
	$(AR) -rc $@ $(OBJ)
	$(RANLIB) $@
	sleep 1

$(LIBSHARED) nolibshared: $(OBJ)
	@SHLIB_CREATEPROG@ $(LIBSHARED) $(LDFLAGS) $(OBJ) $(LIBS)


## ------------------------------------------------------------------
## Maintaining source dependencies... either GNU, generic, or none...
## ------------------------------------------------------------------

@SOURCE_DEPENDENCIES@
