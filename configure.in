dnl Process this file with autoconf to produce configure.
dnl 
dnl 
dnl 
dnl This work was produced at the University of California, Lawrence Livermore
dnl National Laboratory (UC LLNL)  under contract no.  W-7405-ENG-48 (Contract
dnl 48) between  the U.S. Department of Energy  (DOE)  and The Regents  of the
dnl University  of  California  (University)  for  the  operation of  UC LLNL.
dnl The  rights of  the Federal  Government  are reserved  under  Contract  48
dnl subject  to  the restrictions agreed  upon  by  the DOE and  University as
dnl allowed under DOE Acquisition Letter 97-1.
dnl
dnl                                 DISCLAIMER
dnl
dnl This work  was prepared as an  account  of work sponsored by an  agency of
dnl the United States Government. Neither the United States Government nor the
dnl University  of California nor any of  their employees, makes any warranty,
dnl express or implied,  or assumes  any liability  or responsiblity  for  the
dnl accuracy, completeness, or    usefullness of any  information,  apparatus,
dnl product, or  process   disclosed, or represents that  its   use would  not
dnl infringe privately    owned  rights. Reference   herein  to  any  specific
dnl commercial  products, process,  or    service by trade   name,  trademark,
dnl manufacturer, or otherwise, does  not necessarily constitute or imply  its
dnl endorsement, recommendation, or  favoring by the United  States Government
dnl or the   University  of  California.  The views   and  opinions of authors
dnl expressed herein do not  necessarily state or  reflect those of the United
dnl States Government  or the University of  California, and shall not be used
dnl for advertising or product endorsement purposes.
dnl
dnl                       NOTIFICATION OF COMMERCIAL USE
dnl
dnl Commercialization  of this  product is  prohibited  without notifying  the
dnl Department  of  Energy  (DOE) or  Lawrence  Livermore National  Laboratory
dnl (LLNL).
dnl

dnl
dnl This is the autoconf configuration file for MeshTV and company.
dnl Robb Matzke <matzke@llnl.gov>
dnl Mar 18, 1996
dnl
dnl Modifications:
dnl
dnl     Robb Matzke, 5 Mar 1997
dnl     Replaced `touch X' with `echo something > X' because touch doesn't
dnl     update the mtime when touching an empty file on some old BSD systems
dnl     (and neither do other commands that open an empty file for read/write
dnl     access).
dnl
dnl     Robb Matzke, 6 Mar 1997
dnl     Added checks for `-lXpm' and `-lXext' needed by meshtv and meshtvx.
dnl
dnl     Robb Matzke, 19 Mar 1997
dnl     Added a check for a site configuration file based on the host
dnl     name.  If `hostname` returns X, then the configuration file
dnl     ./cofig-site/X.conf is sourced.  The file contains envronment
dnl     variable settings which would have normally appeared on the
dnl     command line so that when make reruns configure the appropriate
dnl     variables are set.  For instance, when I work on maya.nuance.mdn.com
dnl     I use the GNU gcc compiler and I want to turn on warnings and generate
dnl     debug tables.  This is done by adding the line
dnl
dnl           export CFLAGS="-Wall -g"
dnl
dnl     to the ./config-site/maya.nuance.mdn.com.conf file.  These personal
dnl     site configuration files should not be part of a distribution.
dnl
dnl     Robb Matzke, 20 Mar 1997
dnl     The builtin `pwd' command fails on some systems, so we use
dnl     `/bin/pwd' instead if available.
dnl
dnl     Robb Matzke, 20 Mar 1997
dnl     Added the `-f /dev/null' option to the GNU make test in case
dnl     a valid makefile accidently exists.
dnl
dnl     Robb Matzke, 2 Apr 1997
dnl     Removed the AC_FUNC_MMAP check since nothing uses it.
dnl
dnl     Robb Matzke, 15 May 1997
dnl     Removed OS_TYPE as a config.h constant since it was never added to
dnl     acconfig.h anyway.
dnl
dnl     Quincey Koziol, 15 May 1997
dnl     Added link checking for FreeBSD.
dnl
dnl     Sean Ahern, 18 June 1997
dnl     Added the ability to have a config-site configuration file that is
dnl     named the same as the operating system.  Configure now checks
dnl     automatically for this (using uname(1)).  For example, I added
dnl     config-site/OSF1.conf for DEC machines.  Any configuration needed for
dnl     that operating system should go in that file.
dnl
dnl     Robb Matzke, 19 Jun 1997
dnl     Changed the default from `test -L' to `test -h'.
dnl
dnl	Robb Matzke, 27 Aug 1997
dnl	Added -I/usr/local/include and -L/usr/local/lib to the compile
dnl	command so we have a better chance of finding the readline
dnl	library.
dnl
dnl     Robb Matzke, 23 Dec 1997
dnl	Added ability to turn off checking for the GNU readline since lots
dnl     of systems have the software but it's misconfigured, causing
dnl     configure to detect it's presence and causing make to fail.  Say
dnl     `--without-readline' to turn detection off.
dnl
dnl	Robb Matzke, 4 Feb 1998
dnl	Combined GNU target file with non-GNU target file and put the results
dnl	in include/make-targets.in with the other targets.
dnl
dnl     Eric Brugger, Wed Aug 12 15:50:27 PDT 1998
dnl     I made the libraries load static on Linux since most people do not
dnl     have Motif.  Added a check for the Motif includes and libraries
dnl     being found without an explicit include or lib path and added one
dnl     one if it didn't work.  I changed the CPPFLAGS and LDFLAGS to
dnl     append /usr/local/include and /usr/local/lib instead of setting it
dnl     if they weren't already set.  I modified LDFLAGS to contain $tmplib
dnl     at the beginning so that libraries will be found in the local lib
dnl     directory before the public lib directories.
dnl
dnl     Eric Brugger, Thu Aug 13 13:18:43 PDT 1998
dnl     I corrected a bug with the checking of the knowledge of the Motif
dnl     libraries where the test always returned false.
dnl
dnl     Eric Brugger, Fri Aug 28 16:43:46 PDT 1998
dnl     I added support for parallel meshtv.
dnl
dnl     Sean Ahern, Wed Dec  2 11:29:54 PST 1998
dnl     Added a check for "clearmake".  If we're running clearmake,
dnl     set the verbosity to 0.  Also, create a line for the
dnl     compile target in the Makefiles so that clearmake only
dnl     winks in object files that have been created on the same OS
dnl     type.
dnl
dnl     Eric Brugger, Mon Dec 28 09:51:18 PST 1998
dnl     I removed checks for basename and dirname.  The behavior of both
dnl     is poorly defined and varies between OSes.  We could check for a
dnl     specific behavior and then use the system one in that case that
dnl     is a lot of work when using our own is much simpler.
dnl
dnl	Robb Matzke, Tue Feb  9 10:38:54 EST 1999
dnl	Check for location of hdf5 headers and libraries.
dnl
dnl	Robb Matzke, Tue Mar  2 16:35:48 EST 1999
dnl	Check for location of vbt, dsl, and dmf headers and libraries.
dnl
dnl     Eric Brugger, Mon Mar 15 11:39:40 PST 1999
dnl     Made the silo netcdf, pdb and taurus drivers optional.
dnl
dnl	Mark Miller, Thu Mar 25 17:11:34 PST 1999
dnl     Made dmf and hdf5 drivers optional as Eric did above
dnl
dnl     Jeremy Meredith, Thu May 20 15:56:45 PDT 1999
dnl     Added a check for a site config with the first field of hostname
dnl     removed.  This allows a single site config for node-addressable
dnl     machines such as the IBM SP2.  Also reordered the hostname and
dnl     OSname config checks so that a single machine can override the
dnl     OS-based default configuration.
dnl
dnl     Brad Whitlock, Wed Jun 23 15:30:34 PST 1999
dnl     Added a check for the VDL libraries. If the environment variable
dnl     "VDL" is set, then the CFLAGS of meshtvx and Spi are modified
dnl     to include -DVDL and -I$(VDL)/include and -L$(VDL)/lib.
dnl
dnl     Jeremy Meredith, Tue Jul 27 18:27:37 PDT 1999
dnl     Added code to clear MPI_LIBS if we did not --enable-parallel.
dnl
dnl     Eric Brugger, Wed Aug 11 13:11:45 PDT 1999
dnl     I removed the check for -lXpm.  I modified the script to only
dnl     check for -lXext on Linux.  I modified the script to only check
dnl     for -lnsl and -lsocket on Solaris.
dnl
dnl     Brad Whitlock, Wed Jul 7 15:29:45 PST 1999
dnl     Added a check for parallel when the VDL libraries are being 
dnl     checked. If parallel is enabled at that time, then the VDLP
dnl     driver will be compiled.
dnl
dnl     Eric Brugger, Fri Oct  8 14:12:27 PDT 1999
dnl     I added a check for -lXp on Linux.
dnl
dnl     Brad Whitlock, Fri Nov 5 14:53:17 PST 1999
dnl     Removed the GL driver from SpiLib.
dnl
dnl     Jeremy Meredith, Thu Nov 11 13:35:02 PST 1999
dnl     Added ability to have dynamic libraries on Linux systems.
dnl
dnl     Brad Whitlock, Thu Oct 14 10:23:34 PDT 1999
dnl     Added build target for the spectrum widget.
dnl
dnl     Jeremy Meredith and Sean Ahern, Mon Dec 13 14:24:28 PST 1999
dnl     Allow override of MPI_LIBS by external configuration.
dnl
dnl     Jeremy Meredith, Fri Jan  7 10:19:39 PST 2000
dnl     Check for existence of Mesa.  If it's not there: error if we need it,
dnl     don't try to build it if we don't need it.
dnl
dnl     Brad Whitlock, Thu Feb 17 15:17:41 PST 2000
dnl     I added -lpt to the meshtvx link line when using VDL. This makes
dnl     meshtv work with the new VDL library.
dnl
dnl     Sean Ahern, Mon Jan 10 16:26:31 PST 2000
dnl     I put in logic to read the version number in from a file.
dnl
dnl     Brad Whitlock, Thu Feb 10 16:47:50 PST 2000
dnl     Added --disable-sdx flag. Also added a variable called
dnl     tflops_override which will be set to yes on TFLOPS systems.
dnl     (ASCI Red) This bypasses some function tests. Added --disable_gui
dnl     flag. This disables all X and motif stuff from meshtvx and Spi.
dnl     Added --disable-browser so it does not have to be compiled.
dnl
dnl     Brad Whitlock, Fri Mar 31 16:41:33 PST 2000
dnl     Fixed a bug that caused a parallel compiler to be used all the time
dnl     on some platforms.
dnl
dnl     Eric Brugger, Mon May 15 12:02:59 PDT 2000
dnl     I changed references of -lpt to -lptutil to account for the name
dnl     change of the library.
dnl
dnl     Mark Miller, Wed Aug 23 15:38:27 PDT 2000 
dnl     I changed the logic for lib hdf5 to deal correctly with presence or
dnl     absence of zlib. 
dnl
dnl     Eric Brugger, Fri Apr  6 17:52:30 PDT 2001
dnl     I added -lXext to the meshtvx link line when using VDL. This makes
dnl     meshtv work with the new VDL library.
dnl
dnl     Brad Whitlock, Tue Jan 22 16:42:30 PST 2002
dnl     I added options for building JPEG support.
dnl
dnl     Eric Brugger, Tue Mar 12 10:44:02 PST 2002
dnl     I made the tests for jpeg and glr support more robust.  I also added
dnl     a check which adds the dynamic link library (-ldl) on Linux.
dnl
dnl     Jeremy Meredith, Wed Apr 24 11:17:24 PDT 2002
dnl     I changed the SunOS linker flags for the jpeg library.
dnl
dnl     Mark Miller, Tue Oct  1 12:27:07 PDT 2002
dnl     I removed the old dmf-driver checks 
dnl	I fixed the check for hdf5 libs to only change $LIB if HDF5 was
dnl	requested AND found.
dnl	I removed the checks for GLR
dnl
dnl     Eric Brugger, Fri Nov  8 15:15:26 PST 2002
dnl     I removed the logic that statically loaded the libraries on Linux
dnl     systems.
dnl
dnl     Eric Brugger, Thu Dec  5 13:27:13 PST 2002 
dnl     I reordered some of the tests to avoid a problem with hdf5 and the
dnl     size tests.
dnl
dnl     Eric Brugger, Thu Sep  4 13:05:39 PDT 2003
dnl     I corrected a bug with --without-exodus not disabling the exodus
dnl     driver.
dnl
dnl     Eric Brugger, Tue Mar  2 12:41:32 PST 2004
dnl     I modified the hdf5 library logic to statically link the hdf5
dnl     library to avoid LD_LIBRARY_PATH problems and having to distribute
dnl     the shared hdf5 library with binary distributions.
dnl
dnl     Jeremy Meredith, Tue Jul 12 16:34:00 PDT 2005
dnl     Added a Python wrapper for Silo.  This required adding
dnl     checks for the Python include files, adding support
dnl     for shared libraries, and adding support for C++ builds.
dnl 
dnl     Eric Brugger, Thu Mar  9 08:49:31 PST 2006
dnl     I added AC_PROG_EGREP to avoid some problems handling uid and gid
dnl     on some platforms.
dnl
dnl --------------------------------------------------------------------------

dnl
dnl Configuration header stuff...
dnl
AC_REVISION($Id$)dnl
AC_INIT(Makefile.in)
AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(./bin)

CPPFLAGS="-I/usr/local/include $CPPFLAGS"
LDFLAGS="-L/usr/local/lib $LDFLAGS"

### Init the tflops_override variable.
tflops_override=no

### Init the ubgl_override variable.
ubgl_override=no

###     Derive the OS type, as a check for reusing the autoconf cache
OS_type="`(uname -s -r) 2>/dev/null`"
if test -z "$OS_type" ; then
    OS_type="`(hostname) 2>/dev/null`"
fi
AC_CACHE_VAL(vc_cv_os_type,[vc_cv_os_type="$OS_type"])
test -z "$OS_type" && OS_type="$vc_cv_os_type"
test -n "$vc_cv_os_type" && AC_MSG_RESULT("Configuring for $vc_cv_os_type")

if test ".$OS_type" != ".$vc_cv_os_type" ; then
    AC_MSG_RESULT("The cached Operating System does not agree with this OS type.")
    AC_ERROR("Please run \"make distclean\" and try again.")
fi

# Grab the version number
AC_MSG_CHECKING(what version the package is)
VERSION=`cat VERSION`
AC_DEFINE_UNQUOTED(VERSION,"$VERSION")
AC_MSG_RESULT($VERSION)

# Load the OS configuration file if present.
AC_MSG_CHECKING(for OS configuration file)
site_conf=config-site/`uname`.conf
if test -r $site_conf; then
    AC_MSG_RESULT($site_conf)
    . $site_conf
else
    AC_MSG_RESULT(none found)
fi

# Load the site configuration file if present.
# Also check for hostnames where the first field is a node name.
AC_MSG_CHECKING(for site configuration file)
site_conf=config-site/`hostname`.conf
if test -r $site_conf; then
   AC_MSG_RESULT($site_conf)
   . $site_conf
else
   site_conf=config-site/`hostname | cut -f2- -d.`.conf
   if test -r $site_conf; then
      AC_MSG_RESULT($site_conf)
      . $site_conf
   else
      AC_MSG_RESULT(none found)
   fi
fi

# Check for silo.  We can't continue if we don't have SILO.
AC_MSG_CHECKING(for silo)
if test -d silo; then
    AC_MSG_RESULT(found)
else
    AC_MSG_RESULT(not found)
    AC_MSG_ERROR([The build process cannot continue without SILO.  Check to see
that the silo directory exists and rerun 'configure'.])
fi

# Check for the sdx driver. If it is present, do not use it if
# a "--disable-sdx" was given on the configure line.
AC_MSG_CHECKING(for silo's sdx driver)
AC_ARG_ENABLE(sdx,
              [  --disable-sdx           build without sdx],
              UseSDX="$enable_sdx", UseSDX=yes)
if test "X$UseSDX" = "Xyes"; then
    if test -d silo/sdx; then
        AC_MSG_RESULT(found)
        AC_DEFINE(HAVE_SDX_DRIVER)
        SDX="sdx"
        enable_sdx=yes
    else
        AC_MSG_RESULT(not found - SILO will not have SDX)
        SDX=""
        enable_sdx=no
    fi
else
    AC_MSG_RESULT(disabled - SILO will not have SDX)
    SDX=""
    enable_sdx=no
fi
AC_SUBST(SDX)

# Check for the netcdf driver.
AC_MSG_CHECKING(for silo's netcdf driver)
if test -d silo/netcdf; then
    AC_MSG_RESULT(found)
    AC_DEFINE(HAVE_NETCDF_DRIVER)
    NETCDF="netcdf"
else
    AC_MSG_RESULT(not found - SILO will not have NETCDF)
    NETCDF=""
fi
AC_SUBST(NETCDF)

# Check for the pdb driver.
AC_MSG_CHECKING(for silo's pdb driver)
if test -d silo/pdb_drv; then
    AC_MSG_RESULT(found)
    AC_DEFINE(HAVE_PDB_DRIVER)
    PDB_DRV="pdb_drv"
else
    AC_MSG_RESULT(not found - SILO will not have PDB)
    PDB_DRV=""
fi
AC_SUBST(PDB_DRV)

# Check for the taurus driver.
AC_MSG_CHECKING(for silo's taurus driver)
if test -d silo/taurus; then
    AC_MSG_RESULT(found)
    AC_DEFINE(HAVE_TAURUS_DRIVER)
    TAURUS="taurus"
else
    AC_MSG_RESULT(not found - SILO will not have TAURUS)
    TAURUS=""
fi
AC_SUBST(TAURUS)

dnl
dnl Check for the hdf5 driver.
dnl
AC_MSG_CHECKING(for silo's hdf5 driver)
if test -d silo/hdf5_drv; then
    AC_MSG_RESULT(found)
    HDF5_DRV="hdf5_drv"
else
    AC_MSG_RESULT(not found - SILO will not have HDF5)
    HDF5_DRV=""
fi
AC_SUBST(HDF5_DRV)

dnl
dnl Check for the exodus driver.
dnl
AC_MSG_CHECKING(for silo's exodus driver)
if test -d silo/exodus_drv; then
    AC_MSG_RESULT(found)
    EXODUS_DRV="exodus_drv"
else
    AC_MSG_RESULT(not found - SILO will not have Exodus support)
    EXODUS_DRV=""
fi
AC_SUBST(EXODUS_DRV)

dnl
dnl Check if we should build browser.
dnl
AC_MSG_CHECKING(if we should build silo's browser)
AC_ARG_ENABLE(browser,
              [  --disable-browser       do not build browser],
              BuildBrowser="$enable_browser", BuildBrowser=yes)
if test "X$BuildBrowser" = "Xyes"; then
    AC_MSG_RESULT(yes)
    BROWSER="browser"
else
    AC_MSG_RESULT(no)
    BROWSER=""
fi
AC_SUBST(BROWSER)

dnl
dnl Check for spi, Mesa, and meshtvx.  If meshtvx exists, so must spi.
dnl If spi exists, so must Mesa.
dnl
AC_MSG_CHECKING(for Mesa 4.1)
if test -d Mesa-4.1; then
    AC_MSG_RESULT(found)
    MESA="Mesa-4.1"
    if test -z "$MESA_TARGET" ; then
        MESA_BUILD="(cd Mesa-4.1 && $""(MAKE) \`./makedetect \"${CFLAGS:-}\"\`) || exit 1"
    else
        MESA_BUILD="(cd Mesa-4.1 && $""(MAKE) \""$MESA_TARGET"\") || exit 1"
    fi
    MESA_CLEAN="(cd Mesa-4.1 && $""(MAKE) clean) || exit 1"
else
    AC_MSG_RESULT(not found)
    MESA=""
    MESA_BUILD=":"
    MESA_CLEAN=":"
fi
AC_SUBST(MESA_BUILD)
AC_SUBST(MESA_CLEAN)

AC_MSG_CHECKING(for spi)
if test -d spi; then
    AC_MSG_RESULT(found)
    SPI="spi"
    if test -z "$MESA"; then
        AC_MSG_ERROR([spi is here, but Mesa is not.  The spi library
cannot be built without Mesa.  Check to see that the Mesa-3.0 directory exists
and rerun 'configure'.])
    fi
else
    AC_MSG_RESULT(not found)
    SPI=""
fi

AC_MSG_CHECKING(for meshtvx)
if test -d meshtvx; then
    AC_MSG_RESULT(found)
    MESHTVX="meshtvx"
    if test -z "$SPI"; then
        AC_MSG_ERROR([meshtvx is here, but spi is not.  The meshtvx program
cannot be built without spi.  Check to see that the spi directory exists
and rerun 'configure'.])
    fi
else
    AC_MSG_RESULT(not found)
    MESHTVX=""
fi

# Check for meshtv if we did not disable that check.
# If it exists, meshtvx must, too.

dnl
dnl Check to see if the --disable-gui configure flag was given. If
dnl if was then we will tell Spi not to use X and we'll use the
dnl enable_gui variable later on to see if we should test for X and
dnl Motif. We will also not build the MeshTV Gui.
dnl
AC_MSG_CHECKING(if GUI features are enabled)
AC_ARG_ENABLE(gui,
              [  --disable-gui           build without gui],
              UseGUI="$enable_gui", UseGUI=yes)
if test "X$UseGUI" = "Xyes"; then
    AC_MSG_RESULT(yes)
    enable_gui=yes

    dnl
    dnl Gui checking is enabled, look for the meshtv directory.
    dnl
    AC_MSG_CHECKING(for meshtv)
    if test -d meshtv; then
        AC_MSG_RESULT(found)
        MESHTV="meshtv"

        dnl
        dnl Check for meshtvx since meshtv needs it.
        dnl
        if test -z "$MESHTVX"; then
            AC_MSG_ERROR([meshtv is here, but meshtvx is not.  The meshtv program
runs the meshtvx program, so we can't continue without it.  Check to see
that the meshtvx directory exists and rerun 'configure'.])
        fi
    else
        AC_MSG_RESULT(not found)
        MESHTV=""
    fi
else
    AC_MSG_RESULT(no - GUI features disabled.)
    enable_gui=no
    SPI_CPPFLAGS="$SPI_CPPFLAGS -DNOGUI"
    AC_SUBST(SPI_CPPFLAGS)
fi
AC_SUBST(SPI)
AC_SUBST(MESHTV)
AC_SUBST(MESHTVX)

# Check to see if the mpeg_encode is supported.
# Currently only on SGI.
AC_MSG_CHECKING(mpeg_encode)
if test "`uname 2>/dev/null`" = "IRIX" || \
        test "`uname 2>/dev/null`" = "IRIX64"; then
    AC_MSG_RESULT(supported)
    AC_DEFINE(MPEG_SUPPORTED)
else
    AC_MSG_RESULT(not supported)
fi
AC_SUBST(MPEG_SUPPORTED)

# Check to see if the parallel version is enabled.
AC_ARG_ENABLE(parallel,
   [  --enable-parallel       make the parallel version],
   UseParallel=yes, UseParallel=no)
if test "X$UseParallel" = "Xyes"; then
   PARALLEL="parallel"
   MESHTVX_CPPFLAGS="$MESHTVX_CPPFLAGS -DPARALLEL"

   # Only add the mpi library if not on an AIX system
   if (test "`uname 2>/dev/null`" != "AIX") then
       if (test -z "$MPI_LIBS") then
           MPI_LIBS="-lmpi"
       fi
   fi

   # Check if the user has specified a compiler for MPI
   if test -n "$MPI_CC"; then
       MPI_CC="CC=$MPI_CC"
   fi
else
   PARALLEL=""
   MPI_LIBS=""
   MPI_CC=""
fi
AC_SUBST(PARALLEL)
AC_SUBST(MPI_LIBS)
AC_SUBST(MPI_CC)

# Check for programs.
# We shouldn't depend on too many!
AC_PROG_CC
AC_PROG_CXX
AC_PROG_F77
AC_PROG_CPP
AC_PROG_EGREP

# save the cache so far
AC_CACHE_SAVE

# Add an option for disabling the stat checks.
AC_MSG_CHECKING(if we should disable filesystem checks)
AC_ARG_ENABLE(filesystem-checks,
              [  --disable-filesystem-checks          build without filesystem checks],
              UseStat="$enable_filesystem_checks", UseStat=yes)
if test "$UseStat" = "no"; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(DISABLE_FILESYSTEM_CHECKS)
else
    AC_MSG_RESULT(no)
fi

#
# Use size of off64_t to determine which form of stat() calls to make 
#
AC_CHECK_SIZEOF(off64_t)

# Some sites have the GNU readline header files and libraries installed
# incorrectly which causes programs that use them to not link or possibly
# not run.  This configure doesn't check for misconfigured systems, but
# it does allow the user to prevent the GNU readline files from being
# detected.
AC_ARG_WITH(readline,
	[  --without-readline      disable detection of GNU readline],
	detect_readline=$withval,
	detect_readline=yes)

# Keep checking for programs.
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_PROG(MAKEDEPEND,makedepend,makedepend)
AC_ISC_POSIX

# Figure out how to run ar
AC_MSG_CHECKING(how to run ar)
if test -z "$AR"; then
    AR=ar
    AC_MSG_RESULT(ar)
else
    AC_MSG_RESULT($AR)
fi
AC_SUBST(AR)

# Check to see if we're running clearmake.
# If we are, set the build verbosity to 0.  Also, set the
# compilation rule to include the OS, so that we won't wink in object
# files across OSes.
#
dnl Note that the first character in the OS_RULE is a tab.  Don't change this 
dnl to spaces; it's used in the Makefiles.
AC_MSG_CHECKING(for clearmake)
if test "`${MAKE-make} -version 2>/dev/null | cut -d' ' -f1`" = "clearmake"; then
    AC_MSG_RESULT(yes)
    CLEARCASE_BLD_VERBOSITY=0; export CLEARCASE_BLD_VERBOSITY
    OS_RULE="	: $OS_type"
else
    AC_MSG_RESULT(no)
fi
AC_SUBST(OS_RULE)

dnl We always use the install-sh script, so don't uncomment the following line.
dnl AC_PROG_INSTALL

dnl
dnl We only need to check for -ldl if we're on SunOS.
dnl
AC_MSG_CHECKING(for Linux/SunOS and -ldl)
if test "`uname 2>/dev/null`" = "Linux" || test "`uname 2>/dev/null`" = "SunOS"; then
    AC_CHECK_LIB(dl, main,   LIBS="-ldl $LIBS")
else
    AC_MSG_RESULT(no)
fi


dnl
dnl Check for non-graphics libraries in the reverse order that they
dnl are needed.  The libraries are added to the beginning of `LIBS'.
dnl -lsocket is used by both SDX and SPI so it has been promoted to
dnl a non-graphics, non-sdx library.
dnl
    AC_CHECK_LIB(m,        main,      LIBS="-lm $LIBS")
if test 'yes' = $detect_readline; then
   AC_CHECK_LIB(readline, readline,
                LIBS="-lreadline -ltermcap $LIBS",
                ,
                -ltermcap)
else
   AC_MSG_CHECKING(for readline)
   AC_MSG_RESULT(disabled)
fi

if test "`uname 2>/dev/null`" = "HP-UX"; then
   AC_CHECK_LIB(nsl, main, LIBS="-lnsl $LIBS")
fi

if test "`uname 2>/dev/null`" = "SunOS"; then
   AC_CHECK_LIB(socket, main, LIBS="-lsocket $LIBS")
   AC_CHECK_LIB(nsl, main, LIBS="-lnsl $LIBS")
fi

dnl
dnl If we're compiling the sdx driver, check for libraries that SDX needs. 
dnl They are in the reverse order that they are needed.  The libraries are
dnl added to the beginning of `SDX_LIBS'
dnl
if test -n "$SDX"; then
    SDX_LIBS=""
    AC_SUBST(SDX_LIBS)
fi

dnl
dnl Only check for graphics things if we're compiling spi.  (Remember that if
dnl we don't have spi, then we don't have meshtv or meshtvx, so we only need
dnl to check if spi was found.)
dnl
JPEG_LIB=""
JPEG_CFLAGS=""
if test -n "$SPI"; then
    dnl Check to see if we can compile with Gui support. If we can't then
    dnl make sure no windowing system stuff gets in.
    if test "$enable_gui" = "yes"; then
        dnl
        dnl Do we need to tell the compiler about the location of the X and
        dnl Motif include files?  We're trying to keep the compiler command
        dnl line as short and readable as possible.  We must tell the compiler
        dnl about the include directory if the user explicitly gave one with
        dnl `--x-includes=DIR' . If X/Motif libraries are split between multiple
        dnl directories, then list all those directories in one
        dnl `--x-includes="DIR1 DIR2 DIR3"'.
        dnl
        user_specified_x_includes="$x_includes"
        user_specified_x_libraries="$x_libraries"
        AC_PATH_X

        if test "X$no_x" != Xyes && test "$user_specified_x_includes" = NONE; then
           AC_MSG_CHECKING(if compiler knows about X11 header files)
           AC_TRY_CPP([#include <X11/Xlib.h>],
              AC_MSG_RESULT(yes),
              AC_MSG_RESULT(no)
                 if test -n "$x_includes"; then
                    CPPFLAGS="$CPPFLAGS -I`echo $x_includes|sed 's/ 	*/ -I/g'`"
                 fi)
           AC_MSG_CHECKING(if compiler knows about Motif header files)
           AC_TRY_CPP([#include <Xm/Xm.h>],
              AC_MSG_RESULT(yes),
              AC_MSG_RESULT(no)
                 if test -n "$x_includes"; then
                    CPPFLAGS="$CPPFLAGS -I`echo $x_includes|sed 's/ 	*/ -I/g'`"
                 fi)
        elif test "$x_includes" != NONE; then
           CPPFLAGS="$CPPFLAGS -I`echo $x_includes|sed 's/  */ -I/g'`"
        fi

        dnl
        dnl Do we need to tell the linker about the location of the libraries?
        dnl Watch out, because on some systems (like Linux) where more than
        dnl one output file format can be created the libraries found by
        dnl AC_PATH_X might be wrong!  Use that directory only if the compiler
        dnl can't find the appropriate library for -lX11 or -lXm.  The search
        dnl directory is added to the end of LDFLAGS.  If the user specified a
        dnl library directory with `--x-libraries=DIR' then we must supply it to
        dnl the linker!  If X/Motif libraries are split among more than one
        dnl directory then specify all directories with a single option like
        dnl `--x-libraries="/usr/lib/X11R5 /usr/lib/Motif1.2"'.
        dnl
        if test "X$no_x" != "Xyes" && test "$user_specified_x_libraries" = NONE; then
           oldlibs="$LIBS"
           LIBS="-lX11 $LIBS"

           AC_MSG_CHECKING(if linker knows about X11 libraries)
           AC_TRY_LINK([#include <X11/Xlib.h>],[XOpenDisplay((char*)0)],
              AC_MSG_RESULT(yes),
              AC_MSG_RESULT(no)
                 if test -n "$x_libraries"; then
                    LDFLAGS="$LDFLAGS -L`echo $x_libraries|sed 's/  */ -L/g'`"
                 fi)
           LIBS="-lXm $LIBS"
           AC_MSG_CHECKING(if linker knows about Motif libraries)
           AC_TRY_LINK([#include <Xm/Xm.h>],[XmRegisterConverters ()],
              AC_MSG_RESULT(yes),
              AC_MSG_RESULT(no)
                 if test -n "$x_libraries"; then
                    LDFLAGS="$LDFLAGS -L`echo $x_libraries|sed 's/  */ -L/g'`"
                 fi)
           LIBS="$oldlibs"
        elif test "$x_libraries" != NONE; then
           LDFLAGS="$LDFLAGS -L`echo $x_libraries|sed 's/  */ -L/g'`"
        fi

        dnl
        dnl What graphics libraries are available?  We always check for
        dnl the standard X11 libraries and Motif.  Graphics libraries get
        dnl added to the beginning of X_LIBS.  We keep graphics libraries
        dnl separate from other libraries since some of the MeshTV executables
        dnl don't do graphics.  Also, if we have Motif libraries then we add
        dnl `-DMOTIF' to the MESHTVX_CPPFLAGS.  On Solaris, motif is dependent on
        dnl the -lgen library. On Linux, motif is dependent on the -lXp
        dnl library when using Metro Link Motif. On TFLOPS, motif is dependent
        dnl on the -lXext and -lXpm libraries.
        dnl
        AC_CHECK_LIB(X11,  main, X_LIBS="-lX11 $X_LIBS"         ,,$X_LIBS)
        AC_CHECK_LIB(ICE,  main, X_LIBS="-lICE $X_LIBS"         ,,$X_LIBS)
        AC_CHECK_LIB(SM,   main, X_LIBS="-lSM $X_LIBS"          ,,$X_LIBS)
        if test "`uname 2>/dev/null`" = "Linux"; then
           AC_CHECK_LIB(Xext, main, X_LIBS="-lXext $X_LIBS"     ,,$X_LIBS)
        fi
        if test "`uname 2>/dev/null`" = "TFLOPS O/S"; then
           AC_CHECK_LIB(Xext, main, X_LIBS="-lXext $X_LIBS"     ,,$X_LIBS)
        fi
        AC_CHECK_LIB(Xt,   main, X_LIBS="-lXt $X_LIBS"          ,,$X_LIBS)
        AC_CHECK_LIB(gen,  main, X_LIBS="-lgen $X_LIBS"         ,,$X_LIBS)
        if test "`uname 2>/dev/null`" = "Linux"; then
           AC_CHECK_LIB(Xp, main, X_LIBS="-lXp $X_LIBS"         ,,$X_LIBS)
        fi
        if test "`uname 2>/dev/null`" = "TFLOPS O/S"; then
           AC_CHECK_LIB(Xpm, main, X_LIBS="-lXpm $X_LIBS"       ,,$X_LIBS)
        fi
        AC_CHECK_LIB(Xm,   main, X_LIBS="-lXm $X_LIBS"
            MESHTVX_CPPFLAGS="$MESHTVX_CPPFLAGS -DMOTIF"        ,,$X_LIBS)
        AC_SUBST(X_LIBS)
        AC_SUBST(MESHTVX_CPPFLAGS)

        dnl
        dnl If -lGL is present then
        dnl   define OGL
        dnl   link with -lGL
        dnl   add $(OGLOBJ) to GRAPHICS_OBJ
        dnl
        dnl The check for OGL can be disabled with `--disable-ogl'.

        AC_ARG_ENABLE(ogl,
           [  --disable-ogl           do not check for the SGI ogl library],
           UseOGL="$enable_ogl", UseOGL=yes)

        dnl
        dnl Start with X11, because we always have to have it.
        dnl
        SPI_CPPFLAGS="$SPI_CPPFLAGS -DX11 -DSGL"

        dnl Give the default graphics objects that we always have when
        dnl building with a Gui.
        GRAPHICS_OBJ="$GRAPHICS_OBJ \$(WIDGETOBJ) \$(SGLOBJ) \$(X11OBJ)"

        dnl
        dnl Try to find the OGL libraries
        dnl
        if test "X$UseOGL" = "Xyes"; then
            AC_CHECK_LIB(GL,main,
            X_LIBS="-lGL $X_LIBS"
            SPI_CPPFLAGS="$SPI_CPPFLAGS -DOGL"
            GRAPHICS_OBJ="$GRAPHICS_OBJ \$(OGLOBJ)")
        fi

        dnl
        dnl Handle VDL and VDLP compilation
        dnl
        AC_MSG_CHECKING(for VDL)
        if test -n "$VDL"; then
            MESHTVX_CPPFLAGS="$MESHTVX_CPPFLAGS -DVDL"
            SPI_CPPFLAGS="$SPI_CPPFLAGS -DVDL"
            GRAPHICS_OBJ="$GRAPHICS_OBJ \$(VDLOBJ)"
            VDL_INC="-I$VDL/include"

            dnl
            dnl Handle 64 bit libraries more intelligently. I got tired of
            dnl editing makefiles after the fact.
            dnl
            VDL64=`echo "$CFLAGS" | grep "64"`
            if test -n "$VDL64" ; then
                VDL_LIB="-L$VDL/lib64 -lvdl -lptutil -lpthread -lXext"
                AC_MSG_RESULT(yes -- 64 bit)
            else
                VDL_LIB="-L$VDL/lib32 -L$VDL/lib -lvdl -lptutil -lpthread -lXext"
                AC_MSG_RESULT(yes -- 32 bit)
            fi
        
            dnl
            dnl If parallel then also build the VDLP driver.
            dnl
            AC_MSG_CHECKING(for VDLP)
            if test -n "$PARALLEL"; then
                GRAPHICS_OBJ="$GRAPHICS_OBJ \$(VDLPOBJ)"
                SPI_CPPFLAGS="$SPI_CPPFLAGS -DVDLP"
                AC_MSG_RESULT(yes)
            else
                AC_MSG_RESULT(no)
            fi
        else
            AC_MSG_RESULT(no)
        fi
        AC_SUBST(VDL_INC)
        AC_SUBST(VDL_LIB)

        #
        # Look for jpeg. If it exists then build JPEG saving into SPI.
        # We look for both header files and the library.
        #
        AC_ARG_ENABLE(jpeg,
           [  --disable-jpeg           do not check for the JPEG library],
           UseJPEG="$enable_jpeg", UseJPEG=yes)
        if test "X$UseJPEG" = "Xyes"; then
            AC_CHECK_HEADERS(jpeglib.h,found="true",found="false")
            AC_CHECK_LIB(jpeg,main,found=$found,found="false")
            if test "$found" = "true"; then
                JPEG_CFLAGS="-DHAVE_JPEG"
                if test "`uname 2>/dev/null`" = "SunOS"; then
                    JPEG_LIB="-Wl,-Bstatic -ljpeg -Wl,-Bdynamic"
                else
                    JPEG_LIB="-ljpeg"
                fi
            fi
        fi

        AC_SUBST(SPI_CPPFLAGS)
    else
        dnl We are building with ONLY off-screen graphics support. That
        dnl means no X and no OGL just an SGLPIX renderer. Note that we
        dnl also tell meshtvx to build in a batch only mode. That means
        dnl that it has no on screen graphics and no prompt.

        MESHTVX_CPPFLAGS="$MESHTVX_CPPFLAGS -DBATCH_ONLY"
        GRAPHICS_OBJ=""
        X_LIBS=""
        AC_SUBST(MESHTVX_CPPFLAGS)
        AC_SUBST(X_LIBS)
    fi
fi
AC_SUBST(GRAPHICS_OBJ)
AC_SUBST(JPEG_LIB)
AC_SUBST(JPEG_CFLAGS)

dnl
dnl save the cache
dnl
AC_CACHE_SAVE

dnl
dnl Checks for header files.
dnl
AC_HEADER_STDC
AC_HEADER_TIME

dnl
dnl If we don't have these header files, we can't continue.
dnl
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h sys/types.h unistd.h stdarg.h,
                 ,
AC_MSG_ERROR([$0 wasn't able to find a necessary header file
(see above).  Please rectify this and rerun configure.
See the file INSTALL_FAQ in this directory for possible reasons
this might have happened.]
            )
                )

dnl
dnl Check for header files that we can do without.
dnl
AC_CHECK_HEADERS(fnmatch.h ieeefp.h)

dnl
dnl Check for readline header files.  These are often misconfigured, so
dnl try to compile the header file and if that fails then exit configure.
dnl
if test 'yes' = $detect_readline; then
   AC_CHECK_HEADERS(readline/readline.h)
   AC_TRY_LINK(#include<readline/readline.h>,
               [],
	       ,
	       AC_MSG_ERROR([misconfigured readline?
Try again with --without-readline]))
   AC_CHECK_HEADERS(readline/history.h)
   AC_TRY_LINK(#include<readline/history.h>,
               [],
	       ,
	       AC_MSG_ERROR([misconfigured readline?
Try again with --without-readline]))
else
   AC_MSG_CHECKING(for readline/readline.h)
   AC_MSG_RESULT(disabled)
   AC_MSG_CHECKING(for readline/history.h)
   AC_MSG_RESULT(disabled)
fi

dnl
dnl Checks for constants, typedefs, structures, and compiler characteristics.
dnl
AC_C_INLINE
if test 'no' = $ubgl_override; then
    AC_TYPE_UID_T
fi

dnl
dnl Check for various functions in the STDIO header files.
dnl
dnl Note that we are calling two "changequote" macros.  This is because the
dnl default quoting mechanism is to use `[' and `]'.  Since we have to use
dnl these in the "tr" call, we need to change them to something else
dnl temporarily.
dnl
dnl The following `if false' statement is *only* so autoheader can pick up
dnl the names of the constants and insert them into the config.h.in file. If
dnl the AC_DEFINE statements are removed then autoheader never sees the
dnl constants.
if false; then
    AC_DEFINE(HAVE_FCLOSE_POINTER)
    AC_DEFINE(HAVE_FFLUSH_POINTER)
    AC_DEFINE(HAVE_FOPEN_POINTER)
    AC_DEFINE(HAVE_FPRINTF_POINTER)
    AC_DEFINE(HAVE_FREAD_POINTER)
    AC_DEFINE(HAVE_FSEEK_POINTER)
    AC_DEFINE(HAVE_SETVBUF_POINTER)
    AC_DEFINE(HAVE_FTELL_POINTER)
    AC_DEFINE(HAVE_FWRITE_POINTER)
fi

for function in fclose fflush fopen fprintf fread fseek setvbuf ftell fwrite
do
    changequote(<<,>>)
    cap_func="`echo ${function}|tr [a-z] [A-Z]`"
    changequote([,])
    cache_name="`echo vc_cv_${function}_pointer`"
    have_name="`echo HAVE_${cap_func}_POINTER`"
    AC_MSG_CHECKING(for $function function pointer)
    AC_CACHE_VAL($cache_name,
        AC_TRY_COMPILE([#include <stdio.h>],
        [ int (*f)() = (int(*)())$function; ],
            [eval $cache_name=yes ],
            [eval $cache_name=no ]
        )
    )
    if eval "test \"`echo '$''{'$cache_name'}'`\" = no"; then
        AC_MSG_RESULT(no, using a replacement.)
    else
        AC_DEFINE_UNQUOTED(${have_name})
        AC_MSG_RESULT(yes)
    fi
done

dnl
dnl If tflops_override is 'no' then do the following checks.
dnl
if test 'no' = $tflops_override; then
    dnl
    dnl Check for library functions.  If we don't have one, we can't continue.
    dnl
    AC_CHECK_FUNCS(select div strerror,
                   ,
                   AC_MSG_ERROR([$0 wasn't able to find a necessary library
                                function (see above).])
                  )
fi

dnl
dnl Check for library functions that can work around, or that we have
dnl replacements for.
dnl
AC_CHECK_FUNCS(memmove readline atexit add_history fnmatch isnan fpclass)
if test 'yes' = $detect_readline; then
   AC_CHECK_FUNCS(readline add_history)
else
   AC_MSG_CHECKING(for readline)
   AC_MSG_RESULT(disabled)
   AC_MSG_CHECKING(for add_history)
   AC_MSG_RESULT(disabled)
fi

dnl
dnl If tflops_override is 'no' then do the following checks.
dnl
if test 'no' = $tflops_override; then
    dnl
    dnl Test for library functions that SPI and MeshTV need.
    dnl
    if test -n "$SPI"; then
        dnl
        dnl If we don't have these functions, we can't continue.
        dnl
        AC_CHECK_FUNCS(gettimeofday putenv,
                       ,
                       AC_MSG_ERROR([$0 wasn't able to find a library function
                                    necessary for SPI (see above).])
                      )
    fi
fi

dnl
dnl On Paragon/TeraFLOP systems there are "buggy" versions of
dnl `setjmp' and `longjmp' that print an error message to use
dnl `_setjmp' and `_longjmp' instead and exit with a non-zero
dnl status.
dnl
AC_MSG_CHECKING(if setjmp and longjmp work)
if test -n "$SETJMP_OVERRIDE"; then
   AC_MSG_RESULT(no.  Replacing with _setjmp and _longjmp.)
   AC_DEFINE(setjmp,_setjmp)
   AC_DEFINE(longjmp,_longjmp)
else
   AC_MSG_RESULT(yes)
fi

dnl
dnl save the cache
dnl
AC_CACHE_SAVE

# Is HDF5 present (it's needed for the silo/hdf5 driver for pmesh/alec SAMI
# files larger than 2GB until SAF is in place)?  Normally check for
# hdf5.h and libhdf5.a but skip the test if `--without-hdf5' is specified.
# Alternate directories can be specified for hdf5.h and/or libhdf5.a by giving
# the names like this `--with-hdf5=INC,LIB' (if only the LIB directory is
# given then it must still be preceded by a comma).
#
# Checking for hdf5 is complicated by the fact that hdf5 may or may not
# in turn depend on zlib compression lib. In and of itself, Silo does NOT
# depend on zlib. So, we don't want -lz on the link line if zlib is either
# not needed or, worse, not present as this generates warning messages
# or fatal errors. So, we first test for hdf5 without -lz on the link line.
# If this succeeds, we conclude hdf5 is present and we can build the hdf5
# driver. If hdf5 fails, it may be that hdf5 was compiled with zlib. So, next
# we make an independent test for zlib. If zlib fails, we conclude that the
# failure on the hdf5 test was due to something other than lack of zlib and
# decide libhdf5.a is NOT present and we cannot build the hdf5 driver. If
# zlib succeeds, we re-try the hdf5 test with -lz on the link line. If that
# succeeds, we conclude we need -lz on the link line and we can build the
# hdf5 driver. Again, if it fails, we neither put -lz on the link line nor
# build the hdf5 driver. One other possibility that could be tested for
# and configure could make a reasonable comment on is to see if only the
# binaries for hdf5 were installed AND they have zlib dependences which
# are NOT resolvable on the platform they are installed on. This would be
# a boneheaded thing to do, but nonetheless something that configure could
# inform the user has gone wrong and what to do.
#
if test -n "$HDF5_DRV"; then
   saved_CPPFLAGS="$CPPFLAGS"
   saved_LDFLAGS="$LDFLAGS"
   saved_LIBS="$LIBS"
   AC_CHECKING(for hdf5 and supporting libraries)
   AC_ARG_WITH(hdf5,
               [  --with-hdf5=INC,LIB     Location of HDF5 header and library],
               ,withval=yes)
   if test "no" = "$withval"; then
      AC_MSG_CHECKING(for hdf5)
      AC_MSG_RESULT(suppressed)
      HDF5_DRV=""
   else
      hdf5_inc="`echo $withval |cut -f1 -d,`"
      if test "$withval" != "yes" && test -n "$hdf5_inc"; then
	 hdf5_explicit=true
         if test -d "$hdf5_inc"; then
            CPPFLAGS="-I$hdf5_inc $CPPFLAGS"
         else
            AC_MSG_ERROR(problem with directory specified for hdf5 includes)
         fi
      fi
      hdf5_lib="`echo $withval |cut -f2 -d, -s`"
      if test "$withval" != "yes" && test -n "$hdf5_lib"; then
	 hdf5_explicit=true
         if test -d "$hdf5_lib"; then
            LDFLAGS="-L$hdf5_lib $LDFLAGS"
         else
            AC_MSG_ERROR(problem with directory specified for hdf5 library)
         fi
      fi
      notfound=""
      AC_CHECK_HEADERS(hdf5.h,,notfound="hdf5.h")
      tmp_LIBS="$LIBS"
      LIBS="$hdf5_lib/libhdf5.a $LIBS"
      AC_CHECK_FUNC(H5open,AC_DEFINE(HAVE_LIBHDF5),notfound="$notfound libhdf5.a")
      if test -n "$notfound"; then
         LIBS="$tmp_LIBS"
      fi
      #
      # If the above tests did NOT find headers and lib for
      # hdf5, it could be due to zlib, so now test for zlib
      #
      if test -n "$notfound"; then
         # reset the compile and link flags
         CPPFLAGS="$saved_CPPFLAGS"
         LDFLAGS="$saved_LDFLAGS"
         AC_CHECKING(if lack of zlib caused tests for hdf5 to fail) 
         AC_ARG_WITH(zlib,[  --with-zlib=INC,LIB     Use the GNU zlib compression],
                     ,withval=yes)
         if test "no" = "$withval"; then
            AC_MSG_CHECKING(for zlib)
            AC_MSG_RESULT(suppressed)
         else
            zlib_inc="`echo $withval |cut -f1 -d,`"
            if test "$withval" != "yes" && test -n "$zlib_inc"; then
               if test -d "$zlib_inc"; then
                  CPPFLAGS="-I$zlib_inc $CPPFLAGS"
               else
                  AC_MSG_ERROR(problem with directory specified for zlib includes)
               fi
            fi
            zlib_lib="`echo $withval |cut -f2 -d, -s`"
            if test "$withval" != "yes" && test -n "$zlib_lib"; then
               if test -d "$zlib_lib"; then
                  LDFLAGS="-L$zlib_lib $LDFLAGS"
               else
                  AC_MSG_ERROR(problem with directory specified for zlib library)
               fi
            fi
	    notfound=""
            AC_CHECK_HEADERS(zlib.h,,notfound="zlib.h")
            AC_CHECK_LIB(z,compress2,,notfound="$notfound libz.a")
         fi
         #
         # If libz was not found, the failure of hdf5 must be something else.
         #
         if test -n "$notfound"; then
            CPPFLAGS="$saved_CPPFLAGS"
            LDFLAGS="$saved_LDFLAGS"
            HDF5_DRV=""
	    if test -n "$hdf5_explicit"; then 
               AC_MSG_ERROR([
You have made an explicit request for hdf5 with the --with-hdf option
and $0 is unable to find hdf5 and its supporting libs, if any.
Please see INSTALL_FAQ for possible causes.])
   	    else
	       AC_MSG_WARN(hdf5 driver disabled)
	    fi
         else
            # we unset these to defeat autoconf's cache
            unset ac_cv_header_hdf5_h
            unset ac_cv_lib_hdf5_H5open
            #
            # Now, retest for hdf5 with zlib
            #
            if test -n "$hdf5_inc"; then
               CPPFLAGS="-I$hdf5_inc $CPPFLAGS"
            fi
            if test -n "$hdf5_lib"; then
               LDFLAGS="-L$hdf5_lib $LDFLAGS"
            fi
	    notfound=""
            AC_CHECK_HEADERS(hdf5.h,,notfound="hdf5.h")
            tmp_LIBS="$LIBS"
            AC_CHECK_LIB(hdf5,H5open,,notfound="$notfound libhdf5.a")
            if test "$notfound" = ""; then
               LIBS="$hdf5_lib/libhdf5.a $tmp_LIBS"
            fi
            if test -n "$notfound"; then
               CPPFLAGS="$saved_CPPFLAGS"
               LDFLAGS="$saved_LDFLAGS"
               HDF5_DRV=""
	       if test -n "$hdf5_explicit"; then 
                  AC_MSG_ERROR([
You have made an explicit request for hdf5 with the --with-hdf option
and $0 is unable to find hdf5 and its supporting libs, if any.
Please see INSTALL_FAQ for possible causes.])
	       else
                  AC_MSG_WARN(hdf5 driver disabled)
	       fi
            fi
         fi # if test -n "$notfound" (for second hdf5 test)
      fi # if test -n "$notfound" (for zlib)
   fi # if test "no" = "$withval"
fi # if test -n "$HDF5_DRV"

# Check to see if the results of the above tests found the HDF5 libraries
if test -n "$HDF5_DRV"; then
    AC_DEFINE(HAVE_HDF5_DRIVER)
else
   LIBS="$saved_LIBS"
fi


dnl
dnl Check for a python installation
dnl
have_python="no"
python_enabled="no"
python_locations=""
AC_ARG_WITH(python,
            [  --with-python[=<DIR>]     enable Python support],
            ,
            withval="unspecified")
case $withval in
  no)
    python_enabled="no"
    python_locations=""
    ;;
  yes | unspecified)
    python_enabled="yes"
    AC_TRY_CPP([#include <Python.h>],
               have_python="yes"
               AC_MSG_RESULT(yes)
               ,
               have_python="no")
    if test $have_python = "no"; then
        python_locations="/usr/include/python2.3 \
                          /usr/include/python2.2 \
                          /usr/local/python-2.2.1/include/python2.2"
    fi
    ;;
  *)
    dnl use include and lib directories under where they specified
    if test -d $withval; then
        python_enabled="yes"
        python_locations=$withval
    else
        AC_MSG_ERROR([Specified python directory '$withval' does not exist])
    fi
    ;;
esac
if test $python_enabled = "yes"; then
    AC_MSG_CHECKING(for python)
    for pydir in $python_locations
    do
        SAVED_CPPFLAGS=$CPPFLAGS
        CPPFLAGS="$CPPFLAGS -I$pydir"
        AC_TRY_CPP([#include <Python.h>]
                   ,
                   have_python="yes"
                   AC_MSG_RESULT($pydir)
                   break
                   ,
                   CPPFLAGS=$SAVED_CPPFLAGS
                   )
    done
fi
if test $have_python = "no"; then
    SILOPY=""
    if test $python_enabled = "yes"; then
        AC_MSG_RESULT(no)
    fi
else
    SILOPY="python"
fi
AC_SUBST(SILOPY)


dnl
dnl Check for exodus libraries
dnl
if test -n $EXODUS_DRV; then
    AC_ARG_WITH(exodus,
                [  --with-exodus[=<DIR>]           enable Exodus driver],
                ,
                withval="unspecified")
    case $withval in 
      no)
        exodus_disabled="yes"
        ;;
      yes)
	exodus_enabled="yes"
        ;;
      unspecified)
        dnl don't do anything yet
        ;;
      *)
        dnl use include and lib directories under where they specified
	if test -d $withval/inc; then
	    exodus_inc="$withval/inc"
	else
	    exodus_inc="$withval/include"
	fi
	exodus_lib="$withval/lib"
        ;;
    esac

    if test -z "$exodus_disabled"; then
        dnl As long as they didn't say "--without-exodus", let them
        dnl manually specify the include and lib directories
        AC_ARG_WITH(exodus-include,
                    [  --with-exodus-include[=<DIR>]   specify Exodus include path],
                    exodus_inc=$withval)
        AC_ARG_WITH(exodus-lib,
                    [  --with-exodus-lib[=<DIR>]       specify Exodus lib path],
                    exodus_lib=$withval)

        if test -n "$exodus_inc" || test -n "$exodus_lib"; then
            exodus_enabled="yes"
        fi
    fi

    if test -n "$exodus_enabled"; then
	OLD_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS -I$exodus_inc"
	AC_CHECK_HEADERS(exodusII.h,
			 ,
			 CPPFLAGS="$OLD_CPPFLAGS"
			     EXODUS_DRV="")

	OLD_LDFLAGS="$LDFLAGS"
        LDFLAGS="$LDFLAGS -L$exodus_lib"
        AC_CHECK_LIB(exoIIv2c,
  		     ex_open,
		     LIBS="-lexoIIv2c -lnetcdf $LIBS",
		     LDFLAGS="$OLD_LDFLAGS"
		         EXODUS_DRV="",
                     "-lnetcdf")
    else
        EXODUS_DRV=""
    fi
fi

if test -n "$EXODUS_DRV"; then
    AC_DEFINE(HAVE_EXODUS_DRIVER)
fi


dnl
dnl Figure out how to create shared libraries
dnl
SHORT_UNAME=`uname -s | tr A-Z a-z | tr -d 0-9`
case $SHORT_UNAME in
  irix)
    # Both g++ and CC use this
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -shared -o"
    fi
    ;;

  sunos)
    # Expecting g++, but -shared doesn't work right now, so we manually pass
    # -G to Sun's linker.  (This may be because g++'s libstdc++ is not a .so.)
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -Wl,-G -o"
    fi
    ;;

  hp-ux)
    # This is how HP's CC works, although it is not well tested.
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -b -o"
    fi
    if test -z "$SHLIB_SOEXT" ; then SHLIB_SOEXT="so"; fi
    if test -z "$SHLIB_LIBEXT"; then SHLIB_LIBEXT="a"; fi
    ;;

  aix)
    if test "`echo $CXX | cut -c1-3`" = "g++"; then
        # AIX used to be the weird one.  It is mostly normal finally,
        # as long as you use g++.  It should be noted that for AIX to find
        # .so's as libraries, it requires "-Wl,-brtl" in the LDFLAGS.
        # This is handled in the AIX.conf file.
        if test -z "$SHLIB_CREATEPROG"; then
            SHLIB_CREATEPROG="$""(CXX) -Wl,-G -shared -o"
        fi
    else # assume $CXX = xlC
	# -G and -brtl are understood by the linker.
        if test -z "$SHLIB_CREATEPROG"; then
            SHLIB_CREATEPROG="$""(CXX) -G -brtl -o"
        fi
    fi
    ;;

  osf)
    # Expecting g++, but DEC's linker *still* warns about unresolved symbols
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -Wl,-expect_unresolved -Wl,'*' -shared -o"
    fi
    ;;

  linux)
    # Expecting g++
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -shared -o"
    fi
    ;;

  darwin)
    # Expecting g++
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -dynamiclib -o"
    fi
    if test -z "$SHLIB_SOEXT"; then SHLIB_SOEXT="dylib"; fi
    if test -z "$SHLIB_LIBEXT"; then SHLIB_LIBEXT="dylib"; fi
    ;;
esac

# Set up the defaults
if test -z "$SHLIB_SOEXT"          ; then SHLIB_SOEXT="so"; fi
if test -z "$SHLIB_LIBEXT"         ; then SHLIB_LIBEXT="so"; fi

# do the substitutions
AC_SUBST(SHLIB_CREATEPROG)
AC_SUBST(SHLIB_SOEXT)
AC_SUBST(SHLIB_LIBEXT)


dnl Checks for typedefs, structures, and compiler characteristics.

if test 'no' = $ubgl_override; then
    AC_CHECK_SIZEOF(char,0)
    AC_CHECK_SIZEOF(short,0)
    AC_CHECK_SIZEOF(int,0)
    AC_CHECK_SIZEOF(long,0)
    AC_CHECK_SIZEOF(long long,0)
    AC_CHECK_SIZEOF(unsigned char,0)
    AC_CHECK_SIZEOF(unsigned short,0)
    AC_CHECK_SIZEOF(unsigned int,0)
    AC_CHECK_SIZEOF(unsigned long,0)
    AC_CHECK_SIZEOF(unsigned long long,0)
    AC_CHECK_SIZEOF(float,0)
    AC_CHECK_SIZEOF(long float,0)
    AC_CHECK_SIZEOF(double,0)
    AC_CHECK_SIZEOF(long double,0)
    AC_CHECK_SIZEOF(void *,0)

    AC_CHECK_SIZEOF(boolean,0)
    AC_CHECK_SIZEOF(int8,0)
    AC_CHECK_SIZEOF(int16,0)
    AC_CHECK_SIZEOF(int32,0)
    AC_CHECK_SIZEOF(int64,0)
    AC_CHECK_SIZEOF(uint8,0)
    AC_CHECK_SIZEOF(uint16,0)
    AC_CHECK_SIZEOF(uint32,0)
    AC_CHECK_SIZEOF(uint64,0)
    AC_CHECK_SIZEOF(real32,0)
    AC_CHECK_SIZEOF(real64,0)

    AC_CHECK_SIZEOF(size_t,0)

    AC_C_BIGENDIAN
fi

AC_CACHE_SAVE

dnl
dnl Makefile stubs.
dnl The `VARIABLES' file goes at the beginning of each Makefile and
dnl defines make variables for things which are the same for every
dnl makefile.  The `TARGETS' file will be appended to the end of
dnl each makefile and defines targets which are the same for all
dnl makefiles.  The targets include a file to handle updating of source
dnl dependencies.  There are currently two flavors: a GNU-make version
dnl that uses a `.depend' file in each directory, and a non-GNU-make
dnl version that tacks dependencies onto the end of each Makefile.
dnl
AC_SUBST_FILE(VARIABLES)
VARIABLES=include/make-variables
AC_SUBST_FILE(TARGETS)
TARGETS=include/make-targets
AC_MSG_CHECKING(for GNU Make)
if test "`${MAKE-make} --version -f /dev/null 2>/dev/null|sed -n 1p|cut -c1-8`" = "GNU Make"; then
   AC_MSG_RESULT(yes)
   if test -n "$GCC"; then
      SOURCE_DEPENDENCIES=include/make-depend-gnu
   elif test -n "$MAKEDEPEND"; then
      SOURCE_DEPENDENCIES=include/make-depend-std
   else
      SOURCE_DEPENDENCIES=/dev/null
   fi
else
   AC_MSG_RESULT(no. Auto dependencies not used. Clean make not used.)
   if test -n "$MAKEDEPEND"; then
      SOURCE_DEPENDENCIES=include/make-depend-std
   else
      SOURCE_DEPENDENCIES=/dev/null
   fi
fi
AC_SUBST_FILE(SOURCE_DEPENDENCIES)


dnl Temporary directories.
dnl The makefiles build libraries, include files, and executables into
dnl these temporary directories which should exist under the current
dnl directory.  The `pwd' provides the full path name of the directory
dnl since Makefiles are invoked at various levels in the source tree.
dnl
dnl The builtin `pwd' command fails with `bad file unit number' from the
dnl shell on some systems, so try to use `/bin/pwd' instead.
dnl
if test -x /bin/pwd; then
   pwd=/bin/pwd
else
   pwd=pwd
fi

AC_SUBST(tmpbin)dnl
tmpbin=`$pwd`/bin
AC_SUBST(tmpinc)dnl
tmpinc=`$pwd`/include
AC_SUBST(tmplib)dnl
tmplib=`$pwd`/lib

LDFLAGS="-L$tmplib $LDFLAGS"

dnl
dnl Expand variables.
dnl Each file listed here must have a corresponding `*.in' file which
dnl may contain `@VARIABLE@' variable references.  Such variables will
dnl be expanded when creating the new file.  Some of these have to
dnl be in a particular order!
dnl
STANDARD_FILES="include/make-variables include/make-depend-gnu
                include/make-depend-std include/make-targets Makefile"
SILO_FILES="silo/Makefile
            silo/score/Makefile
            silo/pdb/Makefile
	    silo/silo/Makefile
            silo/swat/Makefile
            silo/debug/Makefile
            silo/unknown/Makefile
            silo/filters/Makefile
            silo/tools/Makefile
            silo/tools/browser/Makefile
            silo/tools/s2ensight/Makefile
            silo/tools/rawconvert/Makefile
            silo/tools/silock/Makefile
            silo/tests/Makefile"
if test -n "$NETCDF"; then
    SILO_FILES="$SILO_FILES silo/netcdf/Makefile"
fi
if test -n "$PDB_DRV"; then
    SILO_FILES="$SILO_FILES silo/pdb_drv/Makefile"
fi
if test -n "$TAURUS"; then
    SILO_FILES="$SILO_FILES silo/taurus/Makefile"
fi
if test -n "$HDF5_DRV"; then
    SILO_FILES="$SILO_FILES silo/hdf5_drv/Makefile"
fi
if test -n "$EXODUS_DRV"; then
    SILO_FILES="$SILO_FILES silo/exodus_drv/Makefile"
fi
if test -n "$SILOPY"; then
    SILO_FILES="$SILO_FILES silo/tools/python/Makefile"
fi
if test -n "$SDX"; then
    SDX_FILES="silo/sdx/Makefile"
else
    SDX_FILES=""
fi
if test -n "$SPI"; then
    SPI_FILES="spi/Makefile"
else
    SPI_FILES=""
fi
if test -n "$MESHTV" && test "$enable_gui" = "yes" ; then
    MESHTV_FILES="meshtv/Makefile
                  meshtv/spectrum/Makefile"
else
    MESHTV_FILES=""
fi
if test -n "$MESHTVX"; then
    if test -n "$PARALLEL"; then
        MESHTVX_FILES="meshtvx/Makefile meshtvx/command/Makefile
                       meshtvx/display/Makefile meshtvx/main/Makefile
                       meshtvx/misc/Makefile meshtvx/mwd/Makefile
                       meshtvx/parallel/Makefile meshtvx/plotobj/Makefile
                       meshtvx/toolkit/Makefile"
    else
        MESHTVX_FILES="meshtvx/Makefile meshtvx/command/Makefile
                       meshtvx/display/Makefile meshtvx/main/Makefile
                       meshtvx/misc/Makefile meshtvx/mwd/Makefile
                       meshtvx/plotobj/Makefile meshtvx/toolkit/Makefile"
    fi
else
    MESHTVX_FILES=""
fi

AC_OUTPUT($STANDARD_FILES $SILO_FILES $SDX_FILES $SPI_FILES $MESHTV_FILES
         $MESHTVX_FILES, echo timestamp > include/stamp-h)
