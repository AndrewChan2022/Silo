#                            Copyright 1991 - 2000
#                 The Regents of the University of California.
#                             All rights reserved.
# 
# This work  was produced at the  University of California, Lawrence Livermore
# National Laboratory  (UC LLNL)  under contract no.   W-7405-ENG-48 (Contract
# 48) between  the U.S.  Department  of Energy (DOE)  and  The Regents  of the
# University  of   California (University)   for   the operation  of UC  LLNL.
# Copyright  is reserved  to     the University for   purposes  of  controlled
# dissemination,   commercialization   through   formal licensing,   or  other
# disposition  under  terms  of Contract   48; DOE  policies, regulations  and
# orders;  and U.S.   statutes.  The  rights of   the  Federal Government  are
# reserved under  Contract 48 subject to the  restrictions agreed  upon by DOE
# and University.
# 
#                                 DISCLAIMER
# 
# This software was prepared as an  account of work sponsored  by an agency of
# the United  States Government. Neither the United  States Government nor the
# University of California  nor any  of their  employees, makes any  warranty,
# express or  implied,  or assumes  any  liability  or responsiblity for   the
# accuracy, completeness,  or   usefullness of   any  information,  apparatus,
# product, or process disclosed, or represents that its use would not infringe
# privately   owned  rights. Reference    herein to   any specific  commercial
# products, process, or service   by trade name, trademark,   manufacturer, or
# otherwise,  does not    necessarily  constitute or    imply its endorsement,
# recommendation,  or  favoring by    the  United  States Government  or   the
# University of California. The views and opinions of authors expressed herein
# do not necessarily state or reflect those of the United States Government or
# the University of  California,  and shall not  be  used for  advertising  or
# product endorsement purposes.
#
# Modifications:
#
#   Sean Ahern, Thu Mar 13 09:26:27 PST 1997
#   Removed the PRIVATE_SRC line (which is there for mkman) because all of the
#   objects listed were either already found as ClearCase objects, or do not
#   exist in the directory.
#
#   Sean Ahern, Fri Mar 14 11:01:39 PST 1997
#   Put the PRIVATE_SRC line back in so that mkman doesn't have to rely on
#   ClearCase to get the list of files.  (Robb Matzke at Purdue doesn't use
#   ClearCase and still needs to generate a manifest.)
#
#   Eric Brugger, Thu Aug 13 09:29:36 PDT 1998
#   I removed the reference to $tmplib from the LIBS variable since it is
#   now included in the LDFLAGS variable.
#
#   Jeremy Meredith, Fri Feb 19 09:11:23 PST 1999
#   I removed the PRIVATE_SRC line and added its contents to the SRC line.
#   I also added targets for several test cases.
#
#   Jeremy Meredith, Fri May 21 15:49:10 PDT 1999
#   I added the group_test case.
#
#   Brad Whitlock, Thu Jan 20 13:32:02 PST 2000
#   I added the listtypes test case.
#
#   Jeremy Meredith, Tue Mar 28 10:05:31 PST 2000
#   I added mat3d_3across.
#
#   Jeremy Meredith, Fri Jun 16 14:24:32 PDT 2000
#   I added ucd1d.
#
#   Sean Ahern, Thu Aug  2 16:26:18 PDT 2001
#   I added TestReadMask.
#
#   Eric Brugger, Wed Aug 15 10:58:38 PDT 2001
#   I added wave.
#
#   Eric Brugger, Mon Sep 17 14:09:40 PDT 2001
#   I added multi_file.
#
#   Mark C. Miller, Wed Aug  3 16:00:57 PDT 2005
#   I added csg.c
#
#   Mark C. Miller, Thu Aug 25 14:19:16 PDT 2005
#   I added mmadjacency.c 
#
#   Mark C. Miller, Tue Mar 21 14:12:16 PST 2006
#   Added largefile.c
#
##############################################################################

##
## Programs and options...
##
@SET_MAKE@
@VARIABLES@

CPPFLAGS=-I@tmpinc@ @CPPFLAGS@

# Note that the SDX_LIBS in LIBS might be empty if we aren't using the sdx
# driver.
LIBS=-lsilo @LIBS@ @SDX_LIBS@
LIBDEP=$(tmplib)/libsilo.a

##
## Files...
##
SRC=testall.c partial_io.c array.c dir.c extface.c point.c quad.c \
    simple.c testlib.c ucd.c ucdsamp3.c obj.c onehex.c oneprism.c \
    onepyramid.c onetet.c subhex.c TestReadMask.c twohex.c multispec.c \
    sami.c specmix.c multi_test.c spec.c cpz1plt.c group_test.c \
    alltypes.c resample.c merge_block.c listtypes.c mat3d_3across.c \
    wave.c multi_file.c polyzl.c csg.c mmadjacency.c largefile.c
FSRC=arrayf77.f curvef77.f matf77.f pointf77.f quadf77.f testallf77.f \
    ucdf77.f
HDR=
OBJ=$(SRC:.c=.o) $(FSRC:.f=.o)
TESTS=array dir extface multi_test partial_io point quad simple ucd \
      ucdsamp3 testall arrayf77 curvef77 matf77 pointf77 quadf77 ucdf77 \
      testallf77 obj onehex oneprism onepyramid onetet subhex \
      TestReadMask twohex multispec sami specmix spec cpz1plt spec \
      cpz1plt group_test listtypes alltypes wave multi_file polyzl csg \
      mmadjacency largefile

DISTRIB=exectests.csh pdbcmp.csh

##
## Standard targets...
##

##
## Print a nicely formatted message about how to run the test cases.
## If `fmt' isn't available then the message looks bad.  Also the
## insertion of commas between test names results in extra commas
## with some versions of make.
##
all:
	@echo
	@if (fmt</dev/null)>/dev/null 2>&1;then fmt="fmt -70";else fmt=cat;fi;\
	   echo 'Silo test cases are not compiled by default.  To compile all'\
	      'of them run "make tests" from the silo "tests" directory.'\
	      'Otherwise you can compile them individually with "make'\
	      'TESTNAME".  The test names are: $(TESTS:=,) but "testall" is'\
	      'a good one to start with.' |\
	   $$fmt | sed 's/^/NOTICE: /'
	@echo

tests: $(TESTS)

clean:
	$(RM) $(OBJ) $(TESTS)
	$(RM) .depend

##
## Other targets...
##
array: array.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ array.o $(LDFLAGS) $(LIBS)

dir: dir.o testlib.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ dir.o testlib.o $(LDFLAGS) $(LIBS)

extface: extface.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ extface.o $(LDFLAGS) $(LIBS)

multi_test: multi_test.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ multi_test.o $(LDFLAGS) $(LIBS)

group_test: group_test.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ group_test.o $(LDFLAGS) $(LIBS)

partial_io: partial_io.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ partial_io.o $(LDFLAGS) $(LIBS)

point: point.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ point.o $(LDFLAGS) $(LIBS)

quad: quad.o testlib.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ quad.o testlib.o $(LDFLAGS) $(LIBS)

listtypes: listtypes.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ listtypes.o $(LDFLAGS) $(LIBS)

simple: simple.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ simple.o $(LDFLAGS) $(LIBS)

ucd: ucd.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ ucd.o $(LDFLAGS) $(LIBS)

ucdsamp3: ucdsamp3.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ ucdsamp3.o $(LDFLAGS) $(LIBS)

testall: testall.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ testall.o $(LDFLAGS) $(LIBS)

alltypes: alltypes.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ alltypes.o $(LDFLAGS) $(LIBS)

obj:	obj.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ obj.o $(LDFLAGS) $(LIBS)

onehex: onehex.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ onehex.o $(LDFLAGS) $(LIBS)

oneprism: oneprism.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ oneprism.o $(LDFLAGS) $(LIBS)

onepyramid: onepyramid.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ onepyramid.o $(LDFLAGS) $(LIBS)

onetet: onetet.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ onetet.o $(LDFLAGS) $(LIBS)

subhex: subhex.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ subhex.o $(LDFLAGS) $(LIBS)

twohex: twohex.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ twohex.o $(LDFLAGS) $(LIBS)

multispec: multispec.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ multispec.o $(LDFLAGS) $(LIBS)

specmix: specmix.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ specmix.o $(LDFLAGS) $(LIBS)

testpdb: testpdb.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ testpdb.o $(LDFLAGS) $(LIBS)

sami: sami.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ sami.o $(LDFLAGS) $(LIBS)

spec: spec.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ spec.o $(LDFLAGS) $(LIBS)

cpz1plt: cpz1plt.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ cpz1plt.o $(LDFLAGS) $(LIBS)

resample: resample.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ resample.o $(LDFLAGS) @MPI_LIBS@ $(LIBS)

merge_block: merge_block.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ merge_block.o $(LDFLAGS) $(LIBS)

arrayf77: arrayf77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ arrayf77.o $(LDFLAGS) $(LIBS)

curvef77: curvef77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ curvef77.o $(LDFLAGS) $(LIBS)

matf77: matf77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ matf77.o $(LDFLAGS) $(LIBS)

pointf77: pointf77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ pointf77.o $(LDFLAGS) $(LIBS)

quadf77: quadf77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ quadf77.o $(LDFLAGS) $(LIBS)

ucdf77: ucdf77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ ucdf77.o $(LDFLAGS) $(LIBS)

testallf77: testallf77.o $(LIBDEP)
	$(F77) $(F77FLAGS) -o $@ testallf77.o $(LDFLAGS) $(LIBS)

resample.o: resample.c
	$(CC) $(CFLAGS) $(CPPFLAGS) @MESHTVX_CPPFLAGS@ -c resample.c

mat3d_3across: mat3d_3across.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ mat3d_3across.o $(LDFLAGS) $(LIBS)

ucd1d: ucd1d.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ ucd1d.o $(LDFLAGS) $(LIBS)

TestReadMask: TestReadMask.c $(LIBDEP)
	make CFLAGS=-DNEW_SILO TestReadMask.o 
	$(CC) $(CFLAGS) -o $@ TestReadMask.o $(LDFLAGS) $(LIBS)

wave: wave.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ wave.o $(LDFLAGS) $(LIBS)

multi_file: multi_file.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ multi_file.o $(LDFLAGS) $(LIBS)

polyzl: polyzl.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ polyzl.o $(LDFLAGS) $(LIBS)

csg: csg.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ csg.o $(LDFLAGS) $(LIBS)

mmadjacency: mmadjacency.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ mmadjacency.o $(LDFLAGS) $(LIBS)

largefile: largefile.o $(LIBDEP)
	$(CC) $(CFLAGS) -o $@ largefile.o $(LDFLAGS) $(LIBS)

@TARGETS@
