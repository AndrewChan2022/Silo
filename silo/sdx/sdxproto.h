/* This file is machine generated--do not modify */
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>

#define MAXSTRLEN 256

enum request_type {
	READVAR = 0,
	CONTINUE = 1,
	PAUSE = 2,
	OPEN = 3,
	CLOSE = 4,
	ACCEPT = 5,
	NEWCONTROL = 6,
	NEWDATA = 7
};
typedef enum request_type request_type;
extern bool_t xdr_request_type(XDR *, request_type *);


enum reply_type {
	OK = 0,
	ERROR = 1
};
typedef enum reply_type reply_type;
extern bool_t xdr_reply_type(XDR *, reply_type *);


struct SDXreadvar {
	int type;
	char varname[MAXSTRLEN];
};
typedef struct SDXreadvar SDXreadvar;
extern bool_t xdr_SDXreadvar(XDR *, SDXreadvar *);


struct request_info {
	request_type request;
	union {
		SDXreadvar read;
	} request_info_u;
};
typedef struct request_info request_info;
extern bool_t xdr_request_info(XDR *, request_info *);


struct SDXrequest {
	int type;
	request_info info;
};
typedef struct SDXrequest SDXrequest;
extern bool_t xdr_SDXrequest(XDR *, SDXrequest *);


struct reply_info {
	reply_type reply;
	union {
		int errorno;
	} reply_info_u;
};
typedef struct reply_info reply_info;
extern bool_t xdr_reply_info(XDR *, reply_info *);


struct SDXreply {
	reply_info info;
};
typedef struct SDXreply SDXreply;
extern bool_t xdr_SDXreply(XDR *, SDXreply *);


enum connect_type {
	CONTROL_CONNECT = 0,
	OPEN_CONNECT = 1,
	SERVER_CONNECT = 2
};
typedef enum connect_type connect_type;
extern bool_t xdr_connect_type(XDR *, connect_type *);


struct SDXcontrol {
	char username[MAXSTRLEN];
};
typedef struct SDXcontrol SDXcontrol;
extern bool_t xdr_SDXcontrol(XDR *, SDXcontrol *);


struct SDXopen {
	char username[MAXSTRLEN];
	char idstring[MAXSTRLEN];
};
typedef struct SDXopen SDXopen;
extern bool_t xdr_SDXopen(XDR *, SDXopen *);


struct SDXserver {
	char username[MAXSTRLEN];
	char idstring[MAXSTRLEN];
	int nvar;
	struct {
		u_int varnames_len;
		char *varnames_val;
	} varnames;
	struct {
		u_int meshnames_len;
		char *meshnames_val;
	} meshnames;
	struct {
		u_int vartypes_len;
		int *vartypes_val;
	} vartypes;
	int nmats;
	int nblocks;
};
typedef struct SDXserver SDXserver;
extern bool_t xdr_SDXserver(XDR *, SDXserver *);


struct connect_info {
	connect_type connect;
	union {
		SDXcontrol control;
		SDXopen open;
		SDXserver server;
	} connect_info_u;
};
typedef struct connect_info connect_info;
extern bool_t xdr_connect_info(XDR *, connect_info *);


struct SDXconnect {
	int type;
	connect_info info;
};
typedef struct SDXconnect SDXconnect;
extern bool_t xdr_SDXconnect(XDR *, SDXconnect *);


struct SDXcontrolinfo {
	int nservers;
	struct {
		u_int idstrings_len;
		char *idstrings_val;
	} idstrings;
	struct {
		u_int nvars_len;
		int *nvars_val;
	} nvars;
	struct {
		u_int varnames_len;
		char *varnames_val;
	} varnames;
	struct {
		u_int vartypes_len;
		int *vartypes_val;
	} vartypes;
	struct {
		u_int nmats_len;
		int *nmats_val;
	} nmats;
	struct {
		u_int nblocks_len;
		int *nblocks_val;
	} nblocks;
};
typedef struct SDXcontrolinfo SDXcontrolinfo;
extern bool_t xdr_SDXcontrolinfo(XDR *, SDXcontrolinfo *);


struct SDXtoc {
	int nvars;
	struct {
		u_int varnames_len;
		char *varnames_val;
	} varnames;
	struct {
		u_int vartypes_len;
		int *vartypes_val;
	} vartypes;
};
typedef struct SDXtoc SDXtoc;
extern bool_t xdr_SDXtoc(XDR *, SDXtoc *);


enum var_type {
	SDX_INTEGER = 0,
	SDX_FLOAT = 1,
	SDX_DOUBLE = 2,
	SDX_CHAR = 3
};
typedef enum var_type var_type;
extern bool_t xdr_var_type(XDR *, var_type *);


struct var_info {
	var_type var;
	union {
		int ivalue;
		float fvalue;
		double dvalue;
		char cvalue[MAXSTRLEN];
	} var_info_u;
};
typedef struct var_info var_info;
extern bool_t xdr_var_info(XDR *, var_info *);


struct SDXvar {
	var_type type;
	var_info info;
};
typedef struct SDXvar SDXvar;
extern bool_t xdr_SDXvar(XDR *, SDXvar *);


struct SDXarray {
	var_type type;
	union {
		struct {
			u_int iarray_len;
			int *iarray_val;
		} iarray;
		struct {
			u_int farray_len;
			float *farray_val;
		} farray;
		struct {
			u_int darray_len;
			double *darray_val;
		} darray;
		struct {
			u_int carray_len;
			char *carray_val;
		} carray;
	} SDXarray_u;
};
typedef struct SDXarray SDXarray;
extern bool_t xdr_SDXarray(XDR *, SDXarray *);


struct SDXmultimesh {
	int id;
	int nblocks;
	struct {
		u_int meshids_len;
		int *meshids_val;
	} meshids;
	struct {
		u_int meshnames_len;
		char *meshnames_val;
	} meshnames;
	struct {
		u_int meshtypes_len;
		int *meshtypes_val;
	} meshtypes;
};
typedef struct SDXmultimesh SDXmultimesh;
extern bool_t xdr_SDXmultimesh(XDR *, SDXmultimesh *);


struct SDXmultivar {
	int id;
	int nvars;
	struct {
		u_int varnames_len;
		char *varnames_val;
	} varnames;
	struct {
		u_int vartypes_len;
		int *vartypes_val;
	} vartypes;
};
typedef struct SDXmultivar SDXmultivar;
extern bool_t xdr_SDXmultivar(XDR *, SDXmultivar *);


struct SDXmultimat {
	int id;
	int nmats;
	struct {
		u_int matnames_len;
		char *matnames_val;
	} matnames;
};
typedef struct SDXmultimat SDXmultimat;
extern bool_t xdr_SDXmultimat(XDR *, SDXmultimat *);


struct SDXmultimatspecies {
	int id;
	int nspec;
	struct {
		u_int specnames_len;
		char *specnames_val;
	} specnames;
};
typedef struct SDXmultimatspecies SDXmultimatspecies;
extern bool_t xdr_SDXmultimatspecies(XDR *, SDXmultimatspecies *);


struct SDXzonelist {
	int ndims;
	int nzones;
	int nshapes;
	struct {
		u_int shapecnt_len;
		int *shapecnt_val;
	} shapecnt;
	struct {
		u_int shapesize_len;
		int *shapesize_val;
	} shapesize;
	struct {
		u_int nodelist_len;
		int *nodelist_val;
	} nodelist;
	int lnodelist;
	int origin;
};
typedef struct SDXzonelist SDXzonelist;
extern bool_t xdr_SDXzonelist(XDR *, SDXzonelist *);


struct SDXfacelist {
	int ndims;
	int nfaces;
	int origin;
	struct {
		u_int nodelist_len;
		int *nodelist_val;
	} nodelist;
	int lnodelist;
	int nshapes;
	struct {
		u_int shapecnt_len;
		int *shapecnt_val;
	} shapecnt;
	struct {
		u_int shapesize_len;
		int *shapesize_val;
	} shapesize;
	int ntypes;
	struct {
		u_int typelist_len;
		int *typelist_val;
	} typelist;
	struct {
		u_int types_len;
		int *types_val;
	} types;
	struct {
		u_int zoneno_len;
		int *zoneno_val;
	} zoneno;
};
typedef struct SDXfacelist SDXfacelist;
extern bool_t xdr_SDXfacelist(XDR *, SDXfacelist *);


struct SDXedgelist {
	int ndims;
	int nedges;
	struct {
		u_int edge_beg_len;
		int *edge_beg_val;
	} edge_beg;
	struct {
		u_int edge_end_len;
		int *edge_end_val;
	} edge_end;
	int origin;
};
typedef struct SDXedgelist SDXedgelist;
extern bool_t xdr_SDXedgelist(XDR *, SDXedgelist *);


struct SDXquadmesh {
	int id;
	int block_no;
	char name[MAXSTRLEN];
	int cycle;
	float time;
	int coord_sys;
	int major_order;
	int stride[3];
	int coordtype;
	int facetype;
	int planar;
	SDXarray xcoords;
	SDXarray ycoords;
	SDXarray zcoords;
	int datatype;
	float min_extents[3];
	float max_extents[3];
	char xlabel[MAXSTRLEN];
	char ylabel[MAXSTRLEN];
	char zlabel[MAXSTRLEN];
	char xunits[MAXSTRLEN];
	char yunits[MAXSTRLEN];
	char zunits[MAXSTRLEN];
	int ndims;
	int nspace;
	int nnodes;
	int dims[3];
	int origin;
	int min_index[3];
	int max_index[3];
};
typedef struct SDXquadmesh SDXquadmesh;
extern bool_t xdr_SDXquadmesh(XDR *, SDXquadmesh *);


struct SDXucdmesh {
	int id;
	int block_no;
	char name[MAXSTRLEN];
	int cycle;
	float time;
	int coord_sys;
	char xunits[MAXSTRLEN];
	char yunits[MAXSTRLEN];
	char zunits[MAXSTRLEN];
	char xlabel[MAXSTRLEN];
	char ylabel[MAXSTRLEN];
	char zlabel[MAXSTRLEN];
	struct {
		u_int xcoords_len;
		float *xcoords_val;
	} xcoords;
	struct {
		u_int ycoords_len;
		float *ycoords_val;
	} ycoords;
	struct {
		u_int zcoords_len;
		float *zcoords_val;
	} zcoords;
	int datatype;
	float min_extents[3];
	float max_extents[3];
	int ndims;
	int nnodes;
	int origin;
};
typedef struct SDXucdmesh SDXucdmesh;
extern bool_t xdr_SDXucdmesh(XDR *, SDXucdmesh *);


struct SDXquadvar {
	int id;
	char name[MAXSTRLEN];
	char units[MAXSTRLEN];
	char label[MAXSTRLEN];
	int cycle;
	float time;
	int meshid;
	SDXarray vals;
	int datatype;
	int nels;
	int ndims;
	int dims[3];
	int major_order;
	int stride[3];
	int min_index[3];
	int max_index[3];
	int origin;
	float align[3];
};
typedef struct SDXquadvar SDXquadvar;
extern bool_t xdr_SDXquadvar(XDR *, SDXquadvar *);


struct SDXucdvar {
	int id;
	char name[MAXSTRLEN];
	int cycle;
	char units[MAXSTRLEN];
	char label[MAXSTRLEN];
	float time;
	int meshid;
	struct {
		u_int vals_len;
		float *vals_val;
	} vals;
	int datatype;
	int nels;
	int ndims;
	int origin;
	int centering;
};
typedef struct SDXucdvar SDXucdvar;
extern bool_t xdr_SDXucdvar(XDR *, SDXucdvar *);


struct SDXmaterial {
	int id;
	char name[MAXSTRLEN];
	int ndims;
	int origin;
	int dims[3];
	int major_order;
	float stride[3];
	int nmat;
	struct {
		u_int matnos_len;
		int *matnos_val;
	} matnos;
	struct {
		u_int matlist_len;
		int *matlist_val;
	} matlist;
	int mixlen;
	int datatype;
	SDXarray mix_vf;
	struct {
		u_int mix_next_len;
		int *mix_next_val;
	} mix_next;
	struct {
		u_int mix_mat_len;
		int *mix_mat_val;
	} mix_mat;
	struct {
		u_int mix_zone_len;
		int *mix_zone_val;
	} mix_zone;
};
typedef struct SDXmaterial SDXmaterial;
extern bool_t xdr_SDXmaterial(XDR *, SDXmaterial *);


struct SDXMWDInfo {
	int nqmesh;
	struct {
		u_int nqvar_len;
		int *nqvar_val;
	} nqvar;
	int numesh;
	struct {
		u_int nuvar_len;
		int *nuvar_val;
	} nuvar;
	float min_extents[3];
	float max_extents[3];
	int nspace;
	int cycle;
	float time;
	char name[MAXSTRLEN];
};
typedef struct SDXMWDInfo SDXMWDInfo;
extern bool_t xdr_SDXMWDInfo(XDR *, SDXMWDInfo *);

